[{
	"id": "95154a5c.f4eb48",
	"type": "rpi-gpio in",
	"z": "47656820.895a58",
	"name": "button",
	"pin": "22",
	"intype": "up",
	"debounce": "25",
	"read": true,
	"x": 90,
	"y": 660,
	"wires": [
		["b649a54f.469648", "5a250e2c.baf2a", "a45f40b6.0114"]
	]
}, {
	"id": "a45f40b6.0114",
	"type": "rpi-gpio out",
	"z": "47656820.895a58",
	"name": "green",
	"pin": "15",
	"set": true,
	"level": "0",
	"out": "out",
	"x": 710,
	"y": 480,
	"wires": []
}, {
	"id": "2ffde644.38228a",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "off",
	"topic": "",
	"payload": "0",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 90,
	"y": 480,
	"wires": [
		["a45f40b6.0114"]
	]
}, {
	"id": "a3447973.c66308",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "on",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 230,
	"y": 480,
	"wires": [
		["a45f40b6.0114"]
	]
}, {
	"id": "b649a54f.469648",
	"type": "rpi-gpio out",
	"z": "47656820.895a58",
	"name": "yellow",
	"pin": "16",
	"set": true,
	"level": "0",
	"out": "out",
	"x": 710,
	"y": 380,
	"wires": []
}, {
	"id": "5a250e2c.baf2a",
	"type": "rpi-gpio out",
	"z": "47656820.895a58",
	"name": "red",
	"pin": "18",
	"set": true,
	"level": "0",
	"out": "out",
	"x": 710,
	"y": 280,
	"wires": []
}, {
	"id": "e0a961f.f474da",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "off",
	"topic": "",
	"payload": "0",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 90,
	"y": 380,
	"wires": [
		["b649a54f.469648"]
	]
}, {
	"id": "7c47c476.7de1bc",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "on",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 230,
	"y": 380,
	"wires": [
		["b649a54f.469648"]
	]
}, {
	"id": "28f83e92.420112",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "off",
	"topic": "",
	"payload": "0",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 90,
	"y": 280,
	"wires": [
		["5a250e2c.baf2a"]
	]
}, {
	"id": "a15e09e6.2289f8",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "on",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 230,
	"y": 280,
	"wires": [
		["5a250e2c.baf2a"]
	]
}, {
	"id": "47361edf.b70cd",
	"type": "rpi-gpio out",
	"z": "47656820.895a58",
	"name": "beeper",
	"pin": "29",
	"set": true,
	"level": "0",
	"out": "out",
	"x": 720,
	"y": 580,
	"wires": []
}, {
	"id": "a34509f4.351e08",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "off",
	"topic": "",
	"payload": "0",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": true,
	"x": 90,
	"y": 580,
	"wires": [
		["47361edf.b70cd"]
	]
}, {
	"id": "2c5f40e1.81bde",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "pulse",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 370,
	"y": 580,
	"wires": [
		["68d0de82.f7203"]
	]
}, {
	"id": "68d0de82.f7203",
	"type": "trigger",
	"z": "47656820.895a58",
	"op1": "1",
	"op2": "0",
	"op1type": "num",
	"op2type": "num",
	"duration": "100",
	"extend": false,
	"units": "ms",
	"reset": "",
	"name": "",
	"x": 520,
	"y": 580,
	"wires": [
		["47361edf.b70cd"]
	]
}, {
	"id": "10307b8d.df2914",
	"type": "trigger",
	"z": "47656820.895a58",
	"op1": "1",
	"op2": "0",
	"op1type": "num",
	"op2type": "num",
	"duration": "700",
	"extend": true,
	"units": "ms",
	"reset": "0",
	"name": "",
	"x": 520,
	"y": 280,
	"wires": [
		["5a250e2c.baf2a"]
	]
}, {
	"id": "f049e456.c29168",
	"type": "debug",
	"z": "47656820.895a58",
	"name": "",
	"active": false,
	"console": "false",
	"complete": "false",
	"x": 730,
	"y": 100,
	"wires": []
}, {
	"id": "f863fe2d.99808",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "Periodic Timestamp",
	"topic": "",
	"payload": "",
	"payloadType": "date",
	"repeat": "1",
	"crontab": "",
	"once": true,
	"x": 130,
	"y": 100,
	"wires": [
		["f049e456.c29168", "f53e9266.bd40c"]
	]
}, {
	"id": "65bf1043.09742",
	"type": "trigger",
	"z": "47656820.895a58",
	"op1": "1",
	"op2": "0",
	"op1type": "num",
	"op2type": "num",
	"duration": "500",
	"extend": true,
	"units": "ms",
	"reset": "0",
	"name": "",
	"x": 520,
	"y": 380,
	"wires": [
		["b649a54f.469648"]
	]
}, {
	"id": "1f7b758d.d36c0a",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "Initialize",
	"topic": "",
	"payload": "0",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": true,
	"x": 100,
	"y": 60,
	"wires": [
		["a45f40b6.0114", "10307b8d.df2914", "68d0de82.f7203", "41582b6.1e73ad4", "b649a54f.469648"]
	]
}, {
	"id": "406373ee.516a3c",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "run unit tests",
	"topic": "",
	"payload": "",
	"payloadType": "str",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 110,
	"y": 740,
	"wires": [
		["c2b97c6c.27d2a"]
	]
}, {
	"id": "c2b97c6c.27d2a",
	"type": "function",
	"z": "47656820.895a58",
	"name": "findTouState unit tests",
	"func": "// E.g. msg.payload: { \"d\": \"2016-01-10 00:00:00\", \"e\": [false,true] }\n\nvar tests = [\n    // Expected array: [isOnPeak,isPeakAboutToStart]\n    // 11 AM is always off-peak\n    { \"d\": \"2016-01-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-02-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-03-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-04-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-05-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-06-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-07-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-08-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-09-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-10-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-11-12 11:00:00\", \"e\": [false,false] },\n    { \"d\": \"2016-12-12 11:00:00\", \"e\": [false,false] },\n    \n    // 6 PM is always on-peak except for holidays & weekends\n    //   In 2016, no Federal holidays are observed on the 12th\n    { \"d\": \"2016-01-12 18:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-02-12 18:00:00\", \"e\": [true,false] }, // Fri\n    { \"d\": \"2016-03-11 18:00:00\", \"e\": [true,false] }, // 11 = Fri\n    { \"d\": \"2016-04-12 18:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-05-12 18:00:00\", \"e\": [true,false] }, // Thr\n    { \"d\": \"2016-06-13 18:00:00\", \"e\": [true,false] }, // 13 = Mon\n    { \"d\": \"2016-07-12 18:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-08-12 18:00:00\", \"e\": [true,false] }, // Fri\n    { \"d\": \"2016-09-12 18:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-10-12 18:00:00\", \"e\": [true,false] }, // Wed\n    { \"d\": \"2016-11-14 18:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-12-12 18:00:00\", \"e\": [true,false] }, // Mon\n\n    // 5 AM is on-peak in winter only except for holidays & weekends\n    //   In 2016, no Federal holidays are observed on the 12th\n    { \"d\": \"2016-01-12 05:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-02-12 05:00:00\", \"e\": [true,false] }, // Fri\n    { \"d\": \"2016-03-11 05:00:00\", \"e\": [true,false] }, // 11 = Fri\n    { \"d\": \"2016-04-12 05:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-05-12 05:00:00\", \"e\": [false,false] }, // Thr\n    { \"d\": \"2016-06-13 05:00:00\", \"e\": [false,false] }, // 13 = Mon\n    { \"d\": \"2016-07-12 05:00:00\", \"e\": [false,false] }, // Tue\n    { \"d\": \"2016-08-12 05:00:00\", \"e\": [false,false] }, // Fri\n    { \"d\": \"2016-09-12 05:00:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-10-12 05:00:00\", \"e\": [false,false] }, // Wed\n    { \"d\": \"2016-11-14 05:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-12-12 05:00:00\", \"e\": [true,false] }, // Mon\n    \n    // 08:59 AM is on-peak in winter only except for holidays & weekends\n    //   In 2016, no Federal holidays are observed on the 12th\n    { \"d\": \"2016-01-12 08:59:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-02-12 08:59:00\", \"e\": [true,false] }, // Fri\n    { \"d\": \"2016-03-11 08:59:00\", \"e\": [true,false] }, // 11 = Fri\n    { \"d\": \"2016-04-12 08:59:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-05-12 08:59:00\", \"e\": [false,false] }, // Thr\n    { \"d\": \"2016-06-13 08:59:00\", \"e\": [false,false] }, // 13 = Mon\n    { \"d\": \"2016-07-12 08:59:00\", \"e\": [false,false] }, // Tue\n    { \"d\": \"2016-08-12 08:59:00\", \"e\": [false,false] }, // Fri\n    { \"d\": \"2016-09-12 08:59:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-10-12 08:59:00\", \"e\": [false,false] }, // Wed\n    { \"d\": \"2016-11-14 08:59:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-12-12 08:59:00\", \"e\": [true,false] }, // Mon\n\n    // 1 PM is on-peak in summer only except for holidays & weekends\n    //   In 2016, no Federal holidays are observed on the 12th\n    { \"d\": \"2016-01-12 13:00:00\", \"e\": [false,false] }, // Tue\n    { \"d\": \"2016-02-12 13:00:00\", \"e\": [false,false] }, // Fri\n    { \"d\": \"2016-03-11 13:00:00\", \"e\": [false,false] }, // 11 = Fri\n    { \"d\": \"2016-04-12 13:00:00\", \"e\": [false,false] }, // Tue\n    { \"d\": \"2016-05-12 13:00:00\", \"e\": [true,false] }, // Thr\n    { \"d\": \"2016-06-13 13:00:00\", \"e\": [true,false] }, // 13 = Mon\n    { \"d\": \"2016-07-12 13:00:00\", \"e\": [true,false] }, // Tue\n    { \"d\": \"2016-08-12 13:00:00\", \"e\": [true,false] }, // Fri\n    { \"d\": \"2016-09-12 13:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-10-12 13:00:00\", \"e\": [true,false] }, // Wed\n    { \"d\": \"2016-11-14 13:00:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-12-12 13:00:00\", \"e\": [false,false] }, // Mon\n\n    // Winter yellows\n    { \"d\": \"2016-01-12 03:59:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-01-12 04:00:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-01-12 04:59:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-01-12 05:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-01-12 08:59:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-01-12 09:00:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-01-12 15:59:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-01-12 16:00:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-01-12 16:59:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-01-12 17:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-01-12 20:59:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-01-12 21:00:00\", \"e\": [false,false] }, // Mon\n\n    // Summer yellows\n    { \"d\": \"2016-05-12 11:59:00\", \"e\": [false,false] }, // Mon\n    { \"d\": \"2016-05-12 12:00:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-05-12 12:59:00\", \"e\": [false,true] }, // Mon\n    { \"d\": \"2016-05-12 13:00:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-05-12 19:59:00\", \"e\": [true,false] }, // Mon\n    { \"d\": \"2016-05-12 20:00:00\", \"e\": [false,false] }, // Mon\n\n    // Hoilidays\n    { \"d\": \"2016-01-01 18:00:00\", \"e\": [false,false] }, // \"New Year's Day\"\n    { \"d\": \"2016-01-18 18:00:00\", \"e\": [true,false] }, // \"Martin Luther King, Jr. Day\"\n    { \"d\": \"2016-02-15 18:00:00\", \"e\": [true,false] }, // \"George Washington's BirthDay\"\n    { \"d\": \"2016-05-30 18:00:00\", \"e\": [false,false] }, // \"Memorial Day\"\n    { \"d\": \"2016-07-04 18:00:00\", \"e\": [false,false] }, // \"Independence Day\"\n    { \"d\": \"2016-09-05 18:00:00\", \"e\": [false,false] }, // \"Labor Day\"\n    { \"d\": \"2016-10-10 18:00:00\", \"e\": [true,false] }, // \"Columbus Day\"\n    { \"d\": \"2016-11-11 18:00:00\", \"e\": [true,false] }, // \"Veterans Day\"\n    { \"d\": \"2016-11-24 18:00:00\", \"e\": [false,false] }, // \"Thanksgiving Day\"\n    { \"d\": \"2016-11-25 18:00:00\", \"e\": [true,false] }, // \"Black Friday\"\n    { \"d\": \"2016-12-25 18:00:00\", \"e\": [false,false] }, // \"Christmas Day\"\n    { \"d\": \"2018-12-31 18:00:00\", \"e\": [true,false] }, // \"New Year's Eve\" (2018)\n];\n\nvar tou = flow.get('tou');\n\nvar passTests = [];\nvar failTests = [];\n\ntests.forEach(function(test) {\n    var touState = tou.findTouState(new Date(test.d)).payload;\n    console.log();\n    console.log(test);\n    var fail = false;\n    var failMessage = '';\n    if (test.e[0] != touState.isOnPeak) {\n        failMessage += 'fail isOnPeak, expected ' + test.e[0] + \n            ', found ' + touState.isOnPeak + '. ';\n        fail = true;\n    }\n    if (test.e[1] != touState.isPeakAboutToStart) {\n        failMessage += 'fail isPeakAboutToStart, expected ' + test.e[1] + \n            ', found ' + touState.isPeakAboutToStart + '. ';\n        fail = true;\n    }\n    if (fail) {\n        failTests.push({ \n            \"test\": test, \n            \"message\": failMessage, \n            \"touState\": touState,\n        });\n        console.log('*** Fail: ');\n        console.log(touState);\n        console.log(failMessage);\n        console.log('*** Failed ');\n    } else {\n        passTests.push(test);\n        console.log('pass');\n    }\n})\n\nvar result = { \"payload\": {\n    \"result\": \n        (0 < failTests.length) ? \"fail\" : \n        (tests.length === passTests.length) ? \"pass\" : \"not all tests completed\",\n    \"tests\": tests.length,\n    \"failed\": failTests.length,\n    \"passed\": passTests.length,\n    \"fail\": failTests,\n    \"pass\": passTests,\n}}\n\nreturn result;",
	"outputs": 1,
	"noerr": 0,
	"x": 340,
	"y": 740,
	"wires": [
		["2c49401d.dac7b"]
	]
}, {
	"id": "41582b6.1e73ad4",
	"type": "function",
	"z": "47656820.895a58",
	"name": "Initialize Flow",
	"func": "// If Date() is only returning in UTC, it may be neccesarry to set the Timezone\n// $ sudo dpkg-reconfigure tzdata\n// It may also be necessary to restart Node-RED or reboot the device\n\nfunction getTou() {\n    // \"use strict\"; Node.js 4.x required with const.\n    \n    /*\n    SRP E26, http://www.srpnet.com/prices/home/tou.aspx\n        M-F except when observing\n            New Year's Day,  Memorial Day, Independence Day, \n            Labor Day,  Thanksgiving Day and Christmas Day.\n        Winter\n            November - April\n            Peak: 05:00 - 09:00, 17:00 - 21:00\n        Summer\n            May - October\n            Peak: 13:00 - 20:00\n            \n    Desired output:\n        isOnPeak should be true whenever peak times are active\n        isPeakAboutToStart should be true for the hour immediatly before peak\n    */\n\n    var tou = {};\n    \n    const SUNDAY = 0;\n    const SATURDAY = 6;\n    const MAY = 4;\n    const OCTOBER = 9;\n\n    tou.findTouState = function(theDate) {\n        var holiday = tou.getHoliday(theDate);\n        var isHoliday = !!holiday;\n        var isTouDay = !isHoliday && \n            (SUNDAY < theDate.getDay()) && \n            (SATURDAY > theDate.getDay());\n        var mode = '?';\n        var isOnPeak = false;\n        var isPeakAboutToStart = false;\n\n        if (MAY > theDate.getMonth() || OCTOBER < theDate.getMonth()) {\n            mode = 'winter';\n            isOnPeak = isTouDay && (\n                (5 <= theDate.getHours() && 9 > theDate.getHours()) || \n                (17 <= theDate.getHours() && 21 > theDate.getHours())\n            );\n            isPeakAboutToStart = isTouDay && (\n                (4 === theDate.getHours()) || \n                (16 === theDate.getHours())\n            );\n        } else {\n            mode = 'summer';\n            isOnPeak = isTouDay && (13 <= theDate.getHours() && 20 > theDate.getHours());\n            isPeakAboutToStart = isTouDay && (12 === theDate.getHours());\n        }        \n    \n        var newMsg = { \n            payload: {\n                theDate: theDate.toLocaleString(),\n                mode: mode,\n                getMonth: theDate.getMonth(),\n                getDay: theDate.getDay(),\n                getHours: theDate.getHours(),\n                getMinutes: theDate.getMinutes(),\n                holiday: holiday,\n                isHoliday: isHoliday,\n                isTouDay: isTouDay,\n                isOnPeak: isOnPeak,\n                isPeakAboutToStart: isPeakAboutToStart,\n            }\n        };\n        \n        return newMsg;\n    };\n    \n    tou.getHoliday = function(theDate) {\n        var y = theDate.getFullYear();\n        var m = theDate.getMonth() + 1;\n        var d = theDate.getDate();\n        m = ((9 < m) ? '' : '0') + m;\n        d = ((9 < d) ? '' : '0') + d;\n        var formattedDate = y + '-' + m + '-' + d;\n        if (tou.observedHolidays.hasOwnProperty(formattedDate)) {\n            console.log(formattedDate + ' is a holiday ' + \n                tou.observedHolidays[formattedDate]);\n            return tou.observedHolidays[formattedDate];\n        }\n        return null;\n    };\n\n    // http://holidayapi.com/v1/holidays?country=us&public=true&pretty=true&year=2016\n    // Results were manually trimmed only include holidays affecting ToU\n    tou.observedHolidays = {\n    \t\"2016-01-01\": \"New Year's Day\",\n    \t\"2016-05-30\": \"Memorial Day\",\n    \t\"2016-07-04\": \"Independence Day\",\n    \t\"2016-09-05\": \"Labor Day\",\n    \t\"2016-11-24\": \"Thanksgiving Day\",\n    \t\"2016-12-25\": \"Christmas Day\",\n    \t\"2017-01-01\": \"New Year's Day\",\n    \t\"2017-05-29\": \"Memorial Day\",\n    \t\"2017-07-04\": \"Independence Day\",\n    \t\"2017-09-04\": \"Labor Day\",\n    \t\"2017-11-23\": \"Thanksgiving Day\",\n    \t\"2017-12-25\": \"Christmas Day\",\n    \t\"2018-01-01\": \"New Year's Day\",\n    \t\"2018-05-28\": \"Memorial Day\",\n    \t\"2018-07-04\": \"Independence Day\",\n    \t\"2018-09-03\": \"Labor Day\",\n    \t\"2018-11-22\": \"Thanksgiving Day\",\n    \t\"2018-12-25\": \"Christmas Day\",\n    \t\"2019-01-01\": \"New Year's Day\",\n    \t\"2019-05-27\": \"Memorial Day\",\n    \t\"2019-07-04\": \"Independence Day\",\n    \t\"2019-09-02\": \"Labor Day\",\n    \t\"2019-11-28\": \"Thanksgiving Day\",\n    \t\"2019-12-25\": \"Christmas Day\",\n    \t\"2020-01-01\": \"New Year's Day\",\n    \t\"2020-05-25\": \"Memorial Day\",\n    \t\"2020-07-03\": \"Independence Day\", // Observed!\n    \t\"2020-09-07\": \"Labor Day\",\n    \t\"2020-11-26\": \"Thanksgiving Day\",\n    \t\"2020-12-25\": \"Christmas Day\",\n    \t\"2021-01-01\": \"New Year's Day\",\n    \t\"2021-05-31\": \"Memorial Day\",\n    \t\"2021-07-05\": \"Independence Day\", // Observed!\n    \t\"2021-09-06\": \"Labor Day\",\n    \t\"2021-11-25\": \"Thanksgiving Day\",\n    \t\"2021-12-25\": \"Christmas Day\",\n    \t\"2022-01-01\": \"New Year's Day\",\n    \t\"2022-05-30\": \"Memorial Day\",\n    \t\"2022-07-04\": \"Independence Day\",\n    \t\"2022-09-05\": \"Labor Day\",\n    \t\"2022-11-24\": \"Thanksgiving Day\",\n    \t\"2022-12-25\": \"Christmas Day\",\n    \t\"2023-01-01\": \"New Year's Day\",\n    \t\"2023-05-29\": \"Memorial Day\",\n    \t\"2023-07-04\": \"Independence Day\",\n    \t\"2023-09-04\": \"Labor Day\",\n    \t\"2023-11-23\": \"Thanksgiving Day\",\n    \t\"2023-12-25\": \"Christmas Day\",\n    \t\"2024-01-01\": \"New Year's Day\",\n    \t\"2024-05-27\": \"Memorial Day\",\n    \t\"2024-07-04\": \"Independence Day\",\n    \t\"2024-09-02\": \"Labor Day\",\n    \t\"2024-11-28\": \"Thanksgiving Day\",\n    \t\"2024-12-25\": \"Christmas Day\",\n    \t\"2025-01-01\": \"New Year's Day\",\n    \t\"2025-05-26\": \"Memorial Day\",\n    \t\"2025-07-04\": \"Independence Day\",\n    \t\"2025-09-01\": \"Labor Day\",\n    \t\"2025-11-27\": \"Thanksgiving Day\",\n    \t\"2025-12-25\": \"Christmas Day\",\n    \t\"2026-01-01\": \"New Year's Day\",\n    \t\"2026-05-25\": \"Memorial Day\",\n    \t\"2026-07-03\": \"Independence Day\", // Observed!\n    \t\"2026-09-07\": \"Labor Day\",\n    \t\"2026-11-26\": \"Thanksgiving Day\",\n    \t\"2026-12-25\": \"Christmas Day\",\n    \t\"2027-01-01\": \"New Year's Day\",\n    \t\"2027-05-31\": \"Memorial Day\",\n    \t\"2027-07-05\": \"Independence Day\", // Observed!\n    \t\"2027-09-06\": \"Labor Day\",\n    \t\"2027-11-25\": \"Thanksgiving Day\",\n    \t\"2027-12-25\": \"Christmas Day\",\n    \t\"2028-01-01\": \"New Year's Day\",\n    \t\"2028-05-29\": \"Memorial Day\",\n    \t\"2028-07-04\": \"Independence Day\",\n    \t\"2028-09-04\": \"Labor Day\",\n    \t\"2028-11-23\": \"Thanksgiving Day\",\n    \t\"2028-12-25\": \"Christmas Day\",\n    \t\"2029-01-01\": \"New Year's Day\",\n    \t\"2029-05-28\": \"Memorial Day\",\n    \t\"2029-07-04\": \"Independence Day\",\n    \t\"2029-09-03\": \"Labor Day\",\n    \t\"2029-11-22\": \"Thanksgiving Day\",\n    \t\"2029-12-25\": \"Christmas Day\",\n    \t\"2030-01-01\": \"New Year's Day\",\n    \t\"2030-05-27\": \"Memorial Day\",\n    \t\"2030-07-04\": \"Independence Day\",\n    \t\"2030-09-02\": \"Labor Day\",\n    \t\"2030-11-28\": \"Thanksgiving Day\",\n    \t\"2030-12-25\": \"Christmas Day\",\n    };\n\n    return tou;\n}\n\nflow.set('tou', getTou());\n\nreturn msg;\n",
	"outputs": 1,
	"noerr": 0,
	"x": 320,
	"y": 60,
	"wires": [
		["b3da9734.330968"]
	]
}, {
	"id": "f53e9266.bd40c",
	"type": "function",
	"z": "47656820.895a58",
	"name": "Solve for TOU",
	"func": "var tou = flow.get('tou');\nvar result = tou.findTouState(new Date(msg.payload));\n// console.log(result);\nreturn result;\n",
	"outputs": "1",
	"noerr": 0,
	"x": 140,
	"y": 160,
	"wires": [
		["3ac096af.856c7a", "f70faeeb.a4d4b", "8026841e.4b5dc8", "e35e7dce.281ed"]
	]
}, {
	"id": "2c49401d.dac7b",
	"type": "debug",
	"z": "47656820.895a58",
	"name": "",
	"active": true,
	"console": "false",
	"complete": "false",
	"x": 730,
	"y": 740,
	"wires": []
}, {
	"id": "b3da9734.330968",
	"type": "debug",
	"z": "47656820.895a58",
	"name": "",
	"active": false,
	"console": "false",
	"complete": "false",
	"x": 730,
	"y": 60,
	"wires": []
}, {
	"id": "8026841e.4b5dc8",
	"type": "function",
	"z": "47656820.895a58",
	"name": "yellow?",
	"func": "var result = [null, null];\n\n// yellow is on anytime we are about to enter peak peak\nif (msg.payload.isPeakAboutToStart) {\n    result = [null, { payload: 1 }];\n} else {\n    result = [{ payload: 0 }, null];\n}\n\nreturn result;",
	"outputs": "2",
	"noerr": 0,
	"x": 320,
	"y": 340,
	"wires": [
		["b649a54f.469648"],
		["65bf1043.09742"]
	]
}, {
	"id": "e35e7dce.281ed",
	"type": "function",
	"z": "47656820.895a58",
	"name": "red?",
	"func": "var result = [null, null];\n\n// red is on anytime we are in peak\nif (msg.payload.isOnPeak) {\n    result = [null, { payload: 1 }];\n} else {\n    result = [{ payload: 0 }, null];\n}\n\nreturn result;",
	"outputs": "2",
	"noerr": 0,
	"x": 310,
	"y": 240,
	"wires": [
		["5a250e2c.baf2a"],
		["10307b8d.df2914"]
	]
}, {
	"id": "3ac096af.856c7a",
	"type": "function",
	"z": "47656820.895a58",
	"name": "green?",
	"func": "var result = [null, null];\n\n// green is on anytime we are not in peak\nif (!msg.payload.isOnPeak) {\n    result = [null, { payload: 1 }];\n} else {\n    result = [{ payload: 0 }, null];\n}\n\nreturn result;",
	"outputs": "2",
	"noerr": 0,
	"x": 320,
	"y": 440,
	"wires": [
		["a45f40b6.0114"],
		["25071d95.d2e432"]
	]
}, {
	"id": "2d0bd15e.ec8a5e",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "pulse",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 370,
	"y": 480,
	"wires": [
		["25071d95.d2e432"]
	]
}, {
	"id": "25071d95.d2e432",
	"type": "trigger",
	"z": "47656820.895a58",
	"op1": "1",
	"op2": "0",
	"op1type": "num",
	"op2type": "num",
	"duration": "700",
	"extend": true,
	"units": "ms",
	"reset": "0",
	"name": "",
	"x": 520,
	"y": 480,
	"wires": [
		["a45f40b6.0114"]
	]
}, {
	"id": "37634b7d.cd3524",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "pulse",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 370,
	"y": 380,
	"wires": [
		["65bf1043.09742"]
	]
}, {
	"id": "b716d089.8e0e4",
	"type": "inject",
	"z": "47656820.895a58",
	"name": "pulse",
	"topic": "",
	"payload": "1",
	"payloadType": "num",
	"repeat": "",
	"crontab": "",
	"once": false,
	"x": 370,
	"y": 280,
	"wires": [
		["10307b8d.df2914"]
	]
}, {
	"id": "f70faeeb.a4d4b",
	"type": "debug",
	"z": "47656820.895a58",
	"name": "",
	"active": false,
	"console": "false",
	"complete": "false",
	"x": 730,
	"y": 140,
	"wires": []
}, {
	"id": "7039fc37.365614",
	"type": "comment",
	"z": "47656820.895a58",
	"name": "Time of Use indicator using a TrafficHAT",
	"info": "",
	"x": 180,
	"y": 20,
	"wires": []
}]